* Units of 2D SDPD

We assume dimensions for some of the variables and deduce the rest of
the units from simplified version of SDPD equations (see [[http://maxima.sourceforge.net/][maxima]] file
[[file:sdpd-dim.mac]] for details). I *omit the sum symbols*.

#+BEGIN_EXAMPLE
eq: []$
/* pressure force (8) */
eq <- 'dv = -1/'m * (p[i]/d[i]^2 + p[j]/d[j]^2) * 'dw * 'e * 'dt;
/* viscose force (10), simplified version  */
eq <- 'dv = 'eta/'m * (1/d[i]^2 + 1/d[j]^2) * 'dw/r[i,j] * (v[i] - v[j]) * 'dt;
/* random force (13) and (14) */
eq <- 'dv = sqrt(-4*'kT *'eta*(1/d[i]^2 + 1/d[j]^2)*'dw/r[i,j]) /  'm * sqrt('dt);
/* FENE force (16) */
eq <- 'dv = 'K*'r/(1-('r/'rc)^2) /  'm *'dt;
/* equation of state */
eq <- p[i] = 'c^2*rho[i];
/* partice number density  (7) */
eq <- d[i] = 'w;
/* derivative of the kernel */
eq <- 'diff('w, 'r) = 'dw;
/* definition of partice density */
eq <- 'rho = 'm*'d;
#+END_EXAMPLE

To make all of the above equations dimensionally consistent we can
choose the following system of units.

** 3D

All variables have "usual" 3D units.

|     | description              | units              |
|-----+--------------------------+--------------------|
| rho | density                  | mass/length^3      |
| d   | particle number density  | 1/length^3         |
|-----+--------------------------+--------------------|
| dw  | derivative of SPH kernel | 1/length^4         |
| eta | viscosity                | mass/(length*time) |
| m   | particle mass            | mass               |
| p   | pressure                 | N/length^2         |
| w   | SPH kernel               | 1/length^3         |
| K   | FENE spring constants    | N/length           |
| kT  | thermal energy           | J                  |

** 2D with [rho] = mass/length^2

Assume =d= dimension is =1/length^2= and dimension of =rho= is
=mass/length^2=. Physically: we go into "2D world", hydrodynamics
quantities have 2D interpretations. For example, stresses and pressure
are forces per length (not "per area").

|     | description              | units         | comments |
|-----+--------------------------+---------------+----------|
| rho | density                  | mass/length^2 | not 3D   |
| d   | particle number density  | 1/length^2    |          |
|-----+--------------------------+---------------+----------|
| dw  | derivative of SPH kernel | 1/length^3    |          |
| eta | viscosity                | mass/time     | not 3D   |
| m   | particle mass            | mass          |          |
| p   | pressure                 | N/length      | not 3D   |
| w   | SPH kernel               | 1/length^2    |          |
| K   | FENE spring constants    | N/length      |          |
| kT  | thermal energy           | J             |          |

** 2D with [rho] = mass/length^3

Assume =d= dimension is =1/length^2= and dimension of =rho= is
=mass/length^3=. Physically: we assume some length in third dimension
(L_{3D}). This approach is often used in CFD. It is convenient if we
have only hydrodynamics quantities, we do not even have to specify
L_{3D}. But we have problems with "microscopic" quantities (=m=, =kT=,
and =K=). I took L_{3D} = dr. It is roughly like assuming thickness of
the slit where a "2D" polymer is placed.

|     | description              | units              | comments |
|-----+--------------------------+--------------------+----------|
| rho | density                  | mass/length^3      |          |
| d   | particle number density  | 1/length^2         |          |
|-----+--------------------------+--------------------+----------|
| dw  | derivative of SPH kernel | 1/length^3         |          |
| eta | viscosity                | mass/(length*time) |          |
| m   | particle mass            | mass/length        | not 3D   |
| p   | pressure                 | N/length^2         |          |
| w   | SPH kernel               | 1/length^2         |          |
| K   | FENE spring constants    | N/length^2         | not 3D   |
| kT  | thermal energy           | J/length           | not 3D   |




* Values in LAMMPS
Note that kT = kb * 300 / dr = 2.5875e-14

|      | value in Litvinov2008 | units                |
|------+-----------------------+----------------------|
| c    |              1.903e+3 | length/time          |
| eta  |             10.000e-7 | mass/(length*time)   |
| L    |              1.000e-5 | length               |
| dr   |              1.667e-7 | length               |
| rc   |              6.670e-7 | length               |
| h    |              5.000e-7 | length               |
| K    |                  5.30 | mass/time^2          |
| rho0 |              1.000e+3 | mass/length^3        |
| kT   |             2.485e-14 | length^2*mass/time^2 |

Corresponding values in [[in.vars][lammps implementation]]. The dimension are
chosen to have L=1, rho0=1, k*T=1.

|             | value in LAMMPS | how to get it from Litvinov2008   |
|-------------+-----------------+-----------------------------------|
| c_LAMMPS    |            634. | c*sqrt(rho0)*L^(3/2)/sqrt(kT)     |
| eta_LAMMPS  |        6.343e-4 | eta*sqrt(L)/(sqrt(rho0)*sqrt(kT)) |
| L_LAMMPS    |            1.00 | 1                                 |
| dr_LAMMPS   |        1.667e-2 | dr/L                              |
| rc_LAMMPS   |        6.670e-2 | rc/L                              |
| h_LAMMPS    |        5.000e-2 | h/L                               |
| K_LAMMPS    |        2.133e+4 | K*L^2/kT                          |
| rho0_LAMMPS |            1.00 | 1                                 |
| kT_LAMMPS   |            1.00 | 1                                 |


